using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class CaveGen : MonoBehaviour
{

    [SerializeField] GameObject stoneBlock;
    [SerializeField] GameObject iron;
    [SerializeField] GameObject gold;
    [SerializeField] GameObject lapis;
    [SerializeField] GameObject emerald;
    [SerializeField] GameObject redstone;
    [SerializeField] GameObject coal;
    [SerializeField] GameObject diamond;

    private int caveDepth = 8;

    private int width = 16;
    private int length = 16;

    private float scale = 2f;

    public float offsetX;
    public float offsetY;

    public int blockPositionHeight;

    Dictionary<Vector3Int, string> blockPosition = new Dictionary<Vector3Int, string>();

    List<int> PositionAndHeights = new List<int>();

    public Vector3Int stonePos;

    void Start()
    {
        GameObject stone = new GameObject("stone");
        GameObject iron = new GameObject("iron");
        GameObject gold = new GameObject("gold");
        GameObject lapis = new GameObject("lapis");
        GameObject emerald = new GameObject("emerald");
        GameObject redstone = new GameObject("redstone");
        GameObject coal = new GameObject("coal");
        GameObject diamond = new GameObject("diamond");

        offsetX = Random.Range(0f, 99999f);
        offsetY = Random.Range(0f, 99999f);
        Vector3Int startingChunkCorner = new Vector3Int(0, 0, 0);

        for (int x = 0; x < width; x++)
        {
            for (int z = 0; z < length; z++)
            {
                int height = CalculateColor(x, z);
                stonePos = new Vector3Int(x, height, z);
                for (int y = 0; y < height + 5; y++)
                {
                    float choice = Random.Range(0, 10);
                    if (choice <= 1)
                    {
                        int secondChoice = Random.Range(0, 7);

                        if (secondChoice == 0)
                        {
                            int lowerFillCaveBlockPosition = height - y;
                            blockPosition.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z), "iron");
                            Instantiate(iron, (new Vector3Int(x, lowerFillCaveBlockPosition, z)), Quaternion.identity, iron.transform);
                        }
                        if (secondChoice == 1)
                        {
                            int lowerFillCaveBlockPosition = height - y;
                            blockPosition.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z), "gold");
                            Instantiate(gold, (new Vector3Int(x, lowerFillCaveBlockPosition, z)), Quaternion.identity, gold.transform);
                        }
                        else if (secondChoice == 2)
                        {
                            int lowerFillCaveBlockPosition = height - y;
                            blockPosition.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z), "lapis");
                            Instantiate(lapis, (new Vector3Int(x, lowerFillCaveBlockPosition, z)), Quaternion.identity, lapis.transform);
                        }
                        else if (secondChoice == 3)
                        {
                            int lowerFillCaveBlockPosition = height - y;
                            blockPosition.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z), "emerald");
                            Instantiate(emerald, (new Vector3Int(x, lowerFillCaveBlockPosition, z)), Quaternion.identity, emerald.transform);
                        }
                        else if (secondChoice == 4)
                        {
                            int lowerFillCaveBlockPosition = height - y;
                            blockPosition.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z), "redstone");
                            Instantiate(redstone, (new Vector3Int(x, lowerFillCaveBlockPosition, z)), Quaternion.identity, redstone.transform);
                        }
                        else if (secondChoice == 5)
                        {
                            int lowerFillCaveBlockPosition = height - y;
                            blockPosition.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z), "coal");
                            Instantiate(coal, (new Vector3Int(x, lowerFillCaveBlockPosition, z)), Quaternion.identity, coal.transform);
                        }
                        else if (secondChoice == 6)
                        {
                            int lowerFillCaveBlockPosition = height - y;
                            blockPosition.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z), "diamond");
                            Instantiate(diamond, (new Vector3Int(x, lowerFillCaveBlockPosition, z)), Quaternion.identity, diamond.transform);
                        }

                    }

                    else
                    {
                        int lowerFillCaveBlockPosition = height - y;
                        blockPosition.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z), "stone");
                        Instantiate(stoneBlock, (new Vector3Int(x, lowerFillCaveBlockPosition, z)), Quaternion.identity, stone.transform);
                    }
                }
            }
        }

    }

    void Update()
    {

    }

    int CalculateColor(int x, int y)
    {
        float xCoord = (float)x / width * scale + offsetX;
        float yCoord = (float)y / length * scale + offsetY;
        int sample = Mathf.RoundToInt(Mathf.PerlinNoise(xCoord, yCoord) * caveDepth);
        return sample;
    }
}
