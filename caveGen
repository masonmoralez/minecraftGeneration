using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class blockTerrainGenerator : MonoBehaviour
{
    //create GameObject variables. Prefab blocks will be assigned to them later to be used.
    [SerializeField] GameObject stoneBlock;
    [SerializeField] GameObject bedrockBlock;
    [SerializeField] GameObject ironPrefab;
    [SerializeField] GameObject goldPrefab;
    [SerializeField] GameObject lapisPrefab;
    [SerializeField] GameObject emeraldPrefab;
    [SerializeField] GameObject redstonePrefab;
    [SerializeField] GameObject coalPrefab;
    [SerializeField] GameObject diamondPrefab;

    //undegroundDepth is not used right now, but it will serve a purpose later. It will adjust and scale the height of the underground portion of the chunk.
    private int undergroundDepth = 64;
    //determines the number of chunks that will spawn in the x and z direction
    private int numberOfChunksX = 1;
    private int numberOfChunksZ = 1;
    //unused noiseScale function for getting the Perlin Noise value between 0 and 1
    //used in this video https://youtu.be/TZFv493D7jo?feature=shared, but there is problems with randomization
    private float noiseScale = .005f;

    //determines the width of a chunk
    public int width = 16;
    private int length = 16;
    //scales the window of data collection for Perlin Noise value
    //higher value for scale means that there is greater change in variation, more sharp changes in height, and vice versa for lower scale
    private float scale = 2f;

    //the offset makes it so that there are more random values     
    public float offsetX;
    public float offsetY;
    public float offsetZ;

    public int blockPositionHeight;

    Dictionary<Vector3Int, string> world = new Dictionary<Vector3Int, string>();

    public Vector3Int stonePos;

    void Start()
    {
        GameObject stone = new GameObject("stone");
        GameObject bedrock = new GameObject("bedrock");
        float mainCaveDepthScale = Random.Range(7, 10);
        offsetX = Random.Range(0f, 99999f);
        offsetY = Random.Range(0f, 99999f);
        int intOffSetX = Random.Range(0, 99999);
        int intOffSetY = Random.Range(0, 99999);
        int intOffSetZ = Random.Range(0, 99999);
        for (xChunk = 0; xChunk < numberOfChunksX; xChunk += 1)
        {
            for (zChunk = 0; zChunk < numberOfChunksZ; zChunk += 1)
            {
                Vector3Int corner = new Vector3Int((xChunk * width), 0, (zChunk * length));
                //CreateFloor();
                for (int x = 0; x < width; x++)
                {
                    for (int z = 0; z < length; z++)
                    {
                        int height = CalculateColor(x, z, mainCaveDepthScale, offsetX, offsetY);
                        stonePos = new Vector3Int(x, height, z);
                        for (int y = 0; y < height + 1; y++)//5 is just the number of blocks below the lowest value for height
                        {
                            Vector3Int position = new Vector3Int(x, height - y, z);
                            int lowerFillCaveBlockPosition = height - y;
                            string blockPrefab = ChooseBlockPrefab();
                            world.Add(new Vector3Int(x, lowerFillCaveBlockPosition, z) + corner, blockPrefab);
                            //Instantiate(stoneBlock, new Vector3Int(x, lowerFillCaveBlockPosition, z) + corner, Quaternion.identity, stone.transform);
                        }
                        int bedrockHeight = Random.Range(2, 5);
                        int stoneHeightAboveBedrock = 4 - bedrockHeight;
                        //places the stone above the bedrock layer
                        for (int y = 1; y < (stoneHeightAboveBedrock + 1); y++)
                        {
                            string blockPrefab = ChooseBlockPrefab();
                            world.Add(new Vector3Int(x, -y, z) + corner, blockPrefab);
                            //Instantiate(stoneBlock, (new Vector3Int(x, -y, z) + corner), Quaternion.identity, stone.transform);
                        }
                        //places bottom bedrock layer
                        for (int y = 1; y < bedrockHeight + 1; y++)
                        {
                            world.Add(new Vector3Int(x, -(stoneHeightAboveBedrock + y), z) + corner, "bedrock");
                            //Instantiate(bedrockBlock, (new Vector3Int(x, -(stoneHeightAboveBedrock + y), z) + corner), Quaternion.identity, bedrock.transform);
                        }
                    }
                }
                //CreateCieleing();
                mainCaveDepthScale = Random.Range(7, 10);
                float cielingOffSetX = Random.Range(0f, 99999f);
                float cielingOffSetY = Random.Range(0f, 99999f);
                for (int x = 0; x < width; x++)
                {
                    for (int z = 0; z < length; z++)
                    {
                        int height = CalculateColor(x, z, mainCaveDepthScale, cielingOffSetX, cielingOffSetY) + 9;
                        stonePos = new Vector3Int(x, height, z);
                        int difference = 17 - height;
                        for (int y = 0; y < difference; y++)
                        {
                            string blockPrefab = ChooseBlockPrefab();
                            int upperFillCaveBlockPosition = height + y;
                            world.Add(new Vector3Int(x, upperFillCaveBlockPosition, z) + corner, blockPrefab);
                            //Instantiate(stoneBlock, (new Vector3Int(x, upperFillCaveBlockPosition, z) + corner), Quaternion.identity, stone.transform);
                        }
                    }
                }
                int h = 32;
                for (int x = 0; x < width; x++)
                {
                    for (int z = 0; z < length; z++)
                    {
                        for (int y = 0; y < h; y++)
                        {
                            float noiseValue = Perlin3D(x, y, z, intOffSetX, intOffSetY, intOffSetZ, scale, length, width, h);//get value of the noise at given x, y, and z
                            Vector3Int position = (new Vector3Int(x, y + 14, z) + corner);
                            if (noiseValue > 0.43)
                            {
                                string blockPrefab = ChooseBlockPrefab();
                                if (world.ContainsKey(position))
                                {
                                    world[position] = blockPrefab;
                                }
                                else
                                {
                                    world.Add(position, blockPrefab);
                                    //Instantiate(stoneBlock, (new Vector3Int(x, y + 15, z) + corner), Quaternion.identity, stone.transform);
                                }
                            }
                            else
                            {
                                if (world.ContainsKey(position))
                                {
                                    world[position] = "air";
                                }
                                else
                                {
                                    world.Add(position, "air");
                                }
                            }
                        }
                    }
                }
            }
        }
        foreach (var kvp in world)
        {
            if (kvp.Value == "stone")
            {
                Instantiate(stoneBlock, kvp.Key, Quaternion.identity);
            }
            else if (kvp.Value == "bedrock")
            {
                Instantiate(bedrockBlock, kvp.Key, Quaternion.identity);
            }
            else if (kvp.Value == "gold")
            {
                Instantiate(goldPrefab, kvp.Key, Quaternion.identity);
            }
            else if (kvp.Value == "lapis")
            {
                Instantiate(lapisPrefab, kvp.Key, Quaternion.identity);
            }
            else if (kvp.Value == "emerald")
            {
                Instantiate(emeraldPrefab, kvp.Key, Quaternion.identity);
            }
            else if (kvp.Value == "redstone")
            {
                Instantiate(redstonePrefab, kvp.Key, Quaternion.identity);
            }
            else if (kvp.Value == "diamond")
            {
                Instantiate(diamondPrefab, kvp.Key, Quaternion.identity);
            }
            else if (kvp.Value == "coal")
            {
                Instantiate(coalPrefab, kvp.Key, Quaternion.identity);
            }
            else if (kvp.Value == "iron")
            {
                Instantiate(ironPrefab, kvp.Key, Quaternion.identity);
            }
        }
    }

    void GenerateBlocks()
    {
        foreach (var kvp in world)
        //creates all the blocks, look into rendering the blocks individually 
        {
            Vector3Int position = kvp.Key;
            string objectName = kvp.Value;

            // Instantiate the GameObject at the position

        }
    }

    void Update()
    {

    }

    string ChooseBlockPrefab()
    {
        int choice = Random.Range(0, 100); // Generating a random number between 0 and 99
        if (choice < 5) // Adjust the probability here (e.g., 7% chance for ores)
        {
            // Ores have a slightly higher spawn rate
            int oreChoice = Random.Range(0, 8); // Randomly choose an ore type
            switch (oreChoice)
            {
                //case 0: return ironPrefab;
                case 0: return "gold";
                case 1: return "lapis";
                case 2: return "emerald";
                case 3: return "redstone";
                //case 4: return coalPrefab; // Swap with coal
                case 4: return "diamond"; // Swap with diamond
                default: return "stone";
            }
        }
        else if (10 < choice && choice < 25) // Adjust the probability here (e.g., 3% chance for diamond and emerald)
        {
            // Diamond and emerald are rarer
            int rareChoice = Random.Range(0, 2); // Randomly choose between diamond and emerald
            return rareChoice == 0 ? "coal" : "iron";
        }
        else
        {
            // Higher chance for stone
            return "stone";
        }
    }


    int CalculateColor(int x, int y, float mainCaveDepthScale, float offsetX, float offsetY)
    {
        //Perlin Noise repeats at whole numbers, so therefore we need decimal point numbers
        float xCoord = (float)x / width * scale + offsetX;
        float yCoord = (float)y / length * scale + offsetY;
        int sample = Mathf.RoundToInt(Mathf.PerlinNoise(xCoord, yCoord) * mainCaveDepthScale);
        return sample;
    }

    public static float Perlin3D(float x, float y, float z, int intOffSetX, int intOffSetY, int intOffSetZ, float scale, int length, int width, int height)
    {
        float xCoord = (float)x / width * scale + intOffSetX;
        float yCoord = (float)y / height * scale + intOffSetY;
        float zCoord = (float)z / length * scale + intOffSetZ;

        float ab = Mathf.PerlinNoise(xCoord, yCoord);
        float bc = Mathf.PerlinNoise(yCoord, zCoord);
        float ac = Mathf.PerlinNoise(xCoord, zCoord);

        float ba = Mathf.PerlinNoise(yCoord, xCoord);
        float cb = Mathf.PerlinNoise(zCoord, yCoord);
        float ca = Mathf.PerlinNoise(zCoord, xCoord);

        float abc = ab + bc + ac + ba + cb + ca;
        Debug.Log(abc / 6f);
        return abc / 6f;
    }
}
