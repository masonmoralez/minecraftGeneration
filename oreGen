using System.Collections.Generic;
using UnityEngine;

public class CaveGen : MonoBehaviour
{
    [SerializeField] GameObject stonePrefab;
    [SerializeField] GameObject ironPrefab;
    [SerializeField] GameObject goldPrefab;
    [SerializeField] GameObject lapisPrefab;
    [SerializeField] GameObject emeraldPrefab;
    [SerializeField] GameObject redstonePrefab;
    [SerializeField] GameObject coalPrefab;
    [SerializeField] GameObject diamondPrefab;

    private int caveDepth = 8;
    private int width = 16;
    private int length = 16;
    private float scale = 2f;
    private float offsetX;
    private float offsetY;
    private Dictionary<Vector3Int, GameObject> blockPositions = new Dictionary<Vector3Int, GameObject>();

    void Start()
    {
        offsetX = Random.Range(0f, 99999f);
        offsetY = Random.Range(0f, 99999f);

        GenerateCave();
    }

    void GenerateCave()
    {
        for (int x = 0; x < width; x++)
        {
            for (int z = 0; z < length; z++)
            {
                int height = CalculateHeight(x, z);
                for (int y = 0; y < height + 5; y++)
                {
                    int lowerFillCaveBlockPosition = height - y;
                    GameObject blockPrefab = ChooseBlockPrefab();
                    Vector3Int position = new Vector3Int(x, lowerFillCaveBlockPosition, z);
                    blockPositions.Add(position, Instantiate(blockPrefab, position, Quaternion.identity, transform));
                }
            }
        }
    }

    GameObject ChooseBlockPrefab()
    {
        int choice = Random.Range(0, 100); // Generating a random number between 0 and 99
        if (choice < 10) // Adjust the probability here (e.g., 7% chance for ores)
        {
            // Ores have a slightly higher spawn rate
            int oreChoice = Random.Range(0, 8); // Randomly choose an ore type
            switch (oreChoice)
            {
                //case 0: return ironPrefab;
                case 0: return goldPrefab;
                case 1: return lapisPrefab;
                case 2: return emeraldPrefab;
                case 3: return redstonePrefab;
                //case 4: return coalPrefab; // Swap with coal
                case 4: return diamondPrefab; // Swap with diamond
                default: return stonePrefab;
            }
        }
        else if (10 < choice && choice < 20) // Adjust the probability here (e.g., 3% chance for diamond and emerald)
        {
            // Diamond and emerald are rarer
            int rareChoice = Random.Range(0, 2); // Randomly choose between diamond and emerald
            return rareChoice == 0 ? coalPrefab : ironPrefab;
        }
        else
        {
            // Higher chance for stone
            return stonePrefab;
        }
    }



    int CalculateHeight(int x, int z)
    {
        float xCoord = (float)x / width * scale + offsetX;
        float yCoord = (float)z / length * scale + offsetY;
        return Mathf.RoundToInt(Mathf.PerlinNoise(xCoord, yCoord) * caveDepth);
    }
}
