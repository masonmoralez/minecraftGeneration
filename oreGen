using System.Collections.Generic;
using UnityEngine;

public class CaveGen : MonoBehaviour
{
    // Create game objects
    [SerializeField] GameObject stonePrefab;
    [SerializeField] GameObject ironPrefab;
    [SerializeField] GameObject goldPrefab;
    [SerializeField] GameObject lapisPrefab;
    [SerializeField] GameObject emeraldPrefab;
    [SerializeField] GameObject redstonePrefab;
    [SerializeField] GameObject coalPrefab;
    [SerializeField] GameObject diamondPrefab;


    // Creates variables
    private int caveDepth = 8;
    private int width = 16;
    private int length = 16;
    private float scale = 2f;
    private float offsetX;
    private float offsetY;

    /// <summary>
    /// This is our dictionary
    /// It stores Vector 3 Ints as keys
    /// The values are game objects (the blocks)
    /// </summary>    
    private Dictionary<Vector3Int, GameObject> blockPositions = new Dictionary<Vector3Int, GameObject>();

    void Start()
    {
        offsetX = Random.Range(0f, 99999f);
        offsetY = Random.Range(0f, 99999f);

        GenerateCave();
    }


    // this is the main loop for creating our cave
    void GenerateCave()
    {
        // nested for-loop iterates in x, y, and z directions
        for (int x = 0; x < width; x++)
        {
            for (int z = 0; z < length; z++)
            {
                int height = CalculateHeight(x, z);
                for (int y = 0; y < height + 5; y++)
                {
                    int lowerFillCaveBlockPosition = height - y;

                    // this calls our function which is explained below
                    GameObject blockPrefab = ChooseBlockPrefab();

                    Vector3Int position = new Vector3Int(x, lowerFillCaveBlockPosition, z);
                    blockPositions.Add(position, Instantiate(blockPrefab, position, Quaternion.identity, transform));
                }
            }
        }
    }


    // This function returns which ore prefab we should use.
    // This is called in the GenerateCave() function,
    // and is used to randomnly spawn both ores and stone in our cave. 
    GameObject ChooseBlockPrefab()
    {
        // Generates a random number between 0 and 99
        int choice = Random.Range(0, 100);

        // % chance to spawn an ore
        if (choice < 10) 
        {
            // Chance to get a valuable ore
            int oreChoice = Random.Range(0, 8); // Randomly choose an ore type
            switch (oreChoice)
            {
                case 0: return goldPrefab;
                case 1: return lapisPrefab;
                case 2: return emeraldPrefab;
                case 3: return redstonePrefab;
                case 4: return diamondPrefab;
                default: return stonePrefab;
            }
        }

        // higher spawn rate of iron and coal
        else if (10 < choice && choice < 20) 
        {

            int rareChoice = Random.Range(0, 2);
            return rareChoice == 0 ? coalPrefab : ironPrefab;
        }

        // highest chance for stone
        else
        {
            return stonePrefab;
        }
    }



    int CalculateHeight(int x, int z)
    {
        float xCoord = (float)x / width * scale + offsetX;
        float yCoord = (float)z / length * scale + offsetY;
        return Mathf.RoundToInt(Mathf.PerlinNoise(xCoord, yCoord) * caveDepth);
    }
}
